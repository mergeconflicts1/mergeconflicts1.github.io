---
layout: post
title:  여러 브랜치를 동시에 사용하고 싶을 때 유용한 명령 (worktree)
description: 이번 포스트에서는 여러 브랜치를 동시에 사용하고 싶을 때 유용한 명령인 worktree에 대해 살펴 보겠습니다.
date:   2023-07-03 00:00:35 +0900
image:  '/images/GitBook/fig7-featured.jpg'
tags:   [worktree]
---

이번 포스트에서는 여러 브랜치를 동시에 사용하고 싶을 때 유용한 명령인 worktree에 대해 살펴 보겠습니다. 포스트가 제법 깁니다. 간단히 알고 넘어가실 분은 😅 **2. Worktree의 주요 기능과 사용법** 만 읽고 다른 부분은 건너 뛰셔도 됩니다.

## 0. TL;DR

- QA브랜치, 피처 개발 브랜치 등 여러 브랜치를 수시로 번갈아가면서 작업할 때 브랜치 전환시 시간이 많이 소요되는 경우가 있음
- 이 때 worktree 명령을 사용하면 두 개의 브랜치를 동시에 사용할 수 있음
- worktree 주요 명령에는 worktree를 조회, 추가, 삭제하는 list, add, remove 가 있음

## 1. 개요

일반적으로 Git을 사용할 때 한번에 하나의 브랜치에서 작업하지만, 때때로 두 개의 브랜치에서 작업해야 하는 경우가 있습니다. 예를들어, 이전 스프린트의 작업을 완료해서 `release-1.2` 라는 브랜치에서 QA 프로세스를 진행하고 있고, QA프로세스가 진행되는 동안 다음 스프린트 피처를 `sprint-1.3` 브랜치에서 개발 중이라고 가정해 보겠습니다. 

QA 진행과 새 피처 개발이 동시에 진행되는 경우, 피처 개발을 하다 QA 진행 중 나온 이슈를 처리해야 합니다. 이 작업을 위해서는 수시로 qa브랜치와 피처브랜치를 전환해야 합니다. 이때 각 브랜치 별로 프로젝트 설정이나 의존성 라이브러리가 다르다면 브랜치를 변경하는 것은 시간이 많이 소요되는 작업이 됩니다. QA와 피처 개발을 위해 브랜치를 변경하고 환경설정을 수행하는데 1~3분이 걸린다면, 브랜치를 여러번 변경하는 일은 집중력을 떨어뜨리고 시간을 허비하게 하는 불편한 점이 됩니다.

이런 시간이 오래 걸리는 브랜치 변환을 피하는 방법은 없을까요?

바로 떠오르는 방법은 기존에 작업하던 디렉토리와 다른 새로운 폴더에 추가로 생성해 `git clone`을 하고 원하는 브랜치를 checkout 해서, 하나의 디렉토리에서는 qa브랜치 작업하고 다른 디렉토리에서는 피처 개발을 하는 것입니다.  이 방법의 단점은 원격 저장소가 변경 됐을 때, 변경사항을 로컬저장소에 반영하기 위해 pull이나 fetch를 checkout 된 저장소별로 중복해 수행해야 한다는 점입니다. 만약 관리하고 있는 파일이 많다면 checkout을 두 번 했기 때문에 하드디스크 용량도 두 배로 많이 사용하게 됩니다.

여러 브랜치를 동시에 사용하기 위해서는 이 방법 밖에는 없는걸까요?

고맙게도 Git에서는 여러 브랜치를 여러 작업 디렉토리(workingtree)에서 사용할 수 있는 명령인 worktree를 제공하고 있습니다.

이번 포스트에서는 worktree에 대해 알아보겠습니다.

## 1. Worktree란?

Git에서 worktree란 아래 Git의 전체 구조 그림에서 작업 디렉토리(working directory)를 지칭하는 용어입니다. 일반적으로 worktree는 `git init` 이나 `git clone` 명령을 통해 생성 됩니다.

![]({{site.baseurl}}/images/post/worktree sample.png)

Git을 사용하면 보통 하나의 working tree를 사용합니다. worktree 명령을 이용하면 하나 이상의 working tree를 사용할 수 있습니다.

![]({{site.baseurl}}/images/post/worktree.png)

위 [그림2]는 working tree를 추가 했을 때 저장소 구조입니다. `git init`이나 `git clone` 을 통해 생성된 Main Working Tree가 있고, worktree로 생성한 Linked Working Tree가 두 개  있는 것을 확인 할 수 있습니다.

이름에서 유추할 수 있듯이 worktree로 생성한 working tree를 Git에서는 Linked Working Tree로 부릅니다. Linked Working Tree에서는 많은 데이터를 Main Woking Tree에 있는 것을 참조해 사용하기 때문에 Main Woking Tree를 두 개 생성하는 방법보다 적은 용량으로 추가적인 working tree를 사용할 수 있습니다.

아래는 1.7G 용량을 사용하고 있는 main working tree에 worktree 명령을 사용해 linked working tree를 생성 했을 때 파일 용량 비교한 것 입니다. main 대비 21% 정도의 용량으로 working tree를 생성할 수 있는 것을 확인 할 수 있습니다.

**main working tree와 linked working tree의 사용 용량 비교 (1.7G vs 370M)**

```terminal
tommy.kye@TOMMY-KYE-NT-2022-02 Projects % du -sh ./kakaot 
1.7G	./kakaot    // main working tree 용량 1.7G
tommy.kye@TOMMY-KYE-NT-2022-02 Projects % du -sh ./version-6.6.0 
370M	./version-6.6.0 // linked working tree 용량 370M
```



> [참 고]
> du (Display disk Usage statistics) 명령 
>
> - 디스크 사용량을 표시하는 명령
> - -sh 옵션을 사용하면 지정한 디렉토리의 전체 사용량을 KB, MB, GB 단위로 표시함

## 2. Worktree의 주요 기능과 사용법

Git의 worktree 명령의 주요 기능에는 다음과 같이 list, add, remove 가 있습니다. ([worktree 명령 더 자세히 보기](https://git-scm.com/docs/git-worktree))

```terminal
git worktree list [-v | --porcelain [-z]]
git worktree add [-f] [--detach] [--checkout] [--lock [--reason <string>]]
		   [-b <new-branch>] <path> [<commit-ish>]
git worktree remove [-f] <worktree>
```

1. `git worktree list`: worktree 조회

2. `git worktree add` : worktree 추가

3. `git worktree remove`: worktree 제거



### 2-1. worktree 조회하기 (git worktree list)

working tree 리스트를 보기 위해 터미널 앱을 열고, Git에서 관리하고 있는 디렉토리로 이동합니다. 

```terminal
% pwd 
/Users/tommy.kye/Projects/kakaot
```

현재 디렉토리는 `/Users/tommy.kye/Projects/kakaot` 입니다.

이 디렉토리에서 `git worktree list`라는 명령을 입력합니다.

```terminal
% git worktree list
/Users/tommy.kye/Projects/kakaot  afb4b33e4f [taxi/rt9]
```

명령의 결과로 현재 작업 디렉토리 위치 (`/Users/tommy.kye/Projects/kakaot`)와 
이 작업 디렉토리가 바라보고 있는 브랜치(`[taxi/rt9]`) 그리고 이 브랜치의 HEAD(`afb4b33e4f`)를 알 수 있습니다.

### 2-2. worktree 추가하기 (git worktree add)

`git branch` 명령을 사용해 로컬의 브랜치 리스트를 조회합니다.

```terminal
% git branch   
  dev
  release/version-6.5.0
+ release/version-6.6.0
  taxi/appoint
  taxi/rt8
* taxi/rt9
```

qa브랜치는 `release/version-6.6.0` 입니다.

qa브랜치를 바라보는 working tree를 생성하기 위해 다음과 같이 `git worktree add <path> <branch or commit>` 명령을 실행합니다. 

```terminal
% git worktree add ../version-6.6.0 release/version-6.6.0
Preparing worktree (new branch 'release/version-6.6.0')
branch 'release/version-6.6.0' set up to track 'origin/release/version-6.6.0'.
Updating files: 100% (13112/13112), done.
HEAD is now at 91fd0de1c5 [플랫폼] 홈 티아라 - 카테고리 클릭시 country_code, analytics_name 적재
```

위 명령은 `release/version-6.6.0` 브랜치를 바라보는 working tree인 `version-6.6.0` 디렉토리를 현재 디렉토리의 상위 `../`에 생성하라는 의미입니다.

`git worktree add` 명령 수행 후 `git worktree list` 명령을 사용해 현재 working tree 리스트를 확인해 보겠습니다.

```terminal
% git worktree list
/Users/tommy.kye/Projects/kakaot         afb4b33e4f [taxi/rt9]
/Users/tommy.kye/Projects/version-6.6.0  91fd0de1c5 [release/version-6.6.0]
```

명령을 수행하면 현재 `taxi/rt9` 브랜치를 바라보는 `kakaot` working tree와 `release/version-6.6.0` 브랜치를 바라보는 `version-6.6.0` working tree 두 개가 존재하는 것을 확인할 수 있습니다.

이제 피처 개발 작업은 `/Users/tommy.kye/Projects/kakaot` 디렉토리에서 하고, QA 작업은`/Users/tommy.kye/Projects/version-6.6.0` 에서 하면 됩니다.

이렇게 working tree를 추가로 생성하면 브랜치 전환없이 동시에 두 개의 브랜치에서 작업할 수 있습니다.

만약 Git을 소스트리와 같이 별도의 앱을 통해 사용하신다면 앱에서 로컬저장소 추가하기 메뉴(Window -> Show Repository Browser -> New... -> Add Existing Local Repository) 를 사용해  `/Users/tommy.kye/Projects/version-6.6.0` 디렉토리를 추가해서 사용할 수 있습니다.

<그림 추가)

### 2-3. worktree 제거하기 (git worktree remove)

사용이 끝난 worktree는 `git worktree remove` 명령을 사용해 제거할 수 있습니다.

먼저 현재 worktree 리시트를 확인 합니다.

```terminal
% git worktree list
/Users/tommy.kye/Projects/kakaot         afb4b33e4f [taxi/rt9]
/Users/tommy.kye/Projects/version-6.6.0  91fd0de1c5 [release/version-6.6.0]
```

현재 디렉토리는 `/Users/tommy.kye/Projects/kakaot` 인데 `version-6.6.0` worktree를 제거하기 위해 다음과 같이 `version-6.6.0` working tree 디렉토리를 제거하라는 명령을 입력합니다.

```terminal
% git worktree remove ../version-6.6.0
```



`version-6.6.0 worktree` 제거 후 working tree list 를 확인 합니다.

```terminal
% git worktree list                   
/Users/tommy.kye/Projects/kakaot  afb4b33e4f [taxi/rt9]
```

working tree list에서 `release/version-6.6.0` 브랜치를 바라보던 `version-6.6.0` 디렉토리가 사라졌음을 확인할 수 있습니다.

## 결 론

이상으로 Git에서 여러개 브랜치를 동시에 사용할 수 있게 해주는 worktree 명령에 대해 살펴 봤습니다.

브랜치 전환 작업이 무겁다면 worktree를 활용해 효율적으로 Git을 사용해 보세요.

👨🏻‍💻 Git 지식이 +3 늘었다. 다음 포스트에서 또 만나요 🚀😄



[참고]

- [git-worktree](https://git-scm.com/docs/git-worktree)
- [리눅스 디렉토리 용량 확인 방법(du)](https://psychoria.tistory.com/768)

---



